
// Removes unit shuffix from value '100px -> 100'
// Ref: https://css-tricks.com/snippets/sass/strip-unit-function/
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

// Scale property value between min-to-max
// Note: Only works with 'px' values
// Inspired by: https://madebymike.com.au/writing/precise-control-responsive-typography/
@mixin lerp($property, $minPx, $maxPx, $widthMinPx, $widthMaxPx) {
	$widthMin: strip-unit($widthMinPx);
	$widthMax: strip-unit($widthMaxPx);
	$min: strip-unit($minPx);
	$max: strip-unit($maxPx);
	#{$property}: calc( #{$minPx} + (#{$max} - #{$min}) * ( (100vw - #{$widthMinPx}) / ( #{$widthMax} - #{$widthMin}) ));
	@media (max-width: #{$widthMinPx}) { #{$property}: #{$minPx}; }
	@media (min-width: #{$widthMaxPx}) { #{$property}: #{$maxPx}; }
}

html {
	box-sizing: border-box;
	overflow-x: hidden;
}

*, *:before, *:after {
  box-sizing: border-box;
}

body {
	margin: 0;
	height: 100vh;
	font-family: "Helvetica";
	@include lerp('font-size', 16px, 20px, 320px, 800px);
  line-height: 150%;
}

a, 
a:link,
a:visited,
a:active {
	color: currentColor;
  text-decoration: underline;
}
a:hover,
a:focus {
	opacity: 0.7;
}

h1 { font-size: 3em; }
h2 { font-size: 2em; }

.error {
  margin: 0 auto;
  padding: 0.5em;
  text-align: center;
  background: #ff8888;
}

.loading {
	text-align: center;
	img {
		display: block;
		max-height: 5em;
		filter: brightness(50%);
	}
}